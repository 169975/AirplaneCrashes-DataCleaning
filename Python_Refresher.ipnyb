{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "996f97ce-26b5-41e4-9094-9fafe7d0ac66",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter number of days: 12\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12 days = 1036800 seconds\n"
     ]
    }
   ],
   "source": [
    "days = int(input(\"Enter number of days:\"))\n",
    "seconds = days * 24 * 60 * 60\n",
    "print(f\"{days} days = {seconds} seconds\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a781807b-bcc8-4e16-9f71-707c011a67d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the radius of the sphere: 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "volume of sphere with radius 4.0 = 4.0 = 268.082573106329\n"
     ]
    }
   ],
   "source": [
    "import math \n",
    "\n",
    "radius = float(input(\"Enter the radius of the sphere:\"))\n",
    "volume = (4/3) * math.pi* (radius ** 3)\n",
    "print(f\"volume of sphere with radius {radius} = {radius} = {volume}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1c56ec10-5f8b-4121-bb8a-eb755f7bee03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter side length of square:  12\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Area: 144.0\n",
      "Perimeter:48.0\n"
     ]
    }
   ],
   "source": [
    "def area(side):\n",
    "    return side * side\n",
    "def perimeter(side):\n",
    "    return 4 * side\n",
    "side = float(input(\"Enter side length of square: \"))\n",
    "print(f\"Area: {area(side)}\")\n",
    "print(f\"Perimeter:{perimeter(side)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5c07b24a-2cac-4fb0-b389-8c7b2ee34ffd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a character:  A\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A is Uppercase\n"
     ]
    }
   ],
   "source": [
    "def check_case(ch):\n",
    "    if ch.isupper():\n",
    "        return \"Uppercase\"\n",
    "    elif ch.islower():\n",
    "        return \"Lowercase\"\n",
    "    else:\n",
    "        return \"Not a letter\"\n",
    "char = input(\"Enter a character: \")\n",
    "print(f\"{char} is {check_case(char)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "751bc1d7-0b43-4b7b-adf4-4ff7339b95d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final value of x = 1.0416666666666665\n"
     ]
    }
   ],
   "source": [
    "x = 0\n",
    "y =  20\n",
    "\n",
    "while y >= 6:\n",
    "    y -= 4\n",
    "    x += 2 /y\n",
    "print(\"Final value of x =\", x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cf51b906-1c28-44ef-89f7-6098f28a4a7d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter number 1:  3\n",
      "Enter number 2:  2\n",
      "Enter number 3:  1\n",
      "Enter number 4:  2\n",
      "Enter number 5:  4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Values entered: [3.0, 2.0, 1.0, 2.0, 4.0]\n",
      "Average = 2.4\n"
     ]
    }
   ],
   "source": [
    "numbers =[]\n",
    "\n",
    "for i in range(5):\n",
    "    val = float(input(f\"Enter number {i+1}: \"))\n",
    "    numbers.append(val)\n",
    "\n",
    "average = sum(numbers) / len(numbers)\n",
    "print(\"Values entered:\", numbers)\n",
    "print(\"Average =\",average)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47db019d-9afc-44af-a765-649e14be29a7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
